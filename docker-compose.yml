services:
  mongo:
    image: mongo:latest
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: investment_db
    volumes:
      - ./scripts/initdb/:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - load-balancing

  redis:
    image: redis:latest
    command: redis-server --requirepass Example1234!
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - load-balancing
      
  nginx:
    image: nginx:latest
    container_name: reverse_proxy
    volumes:
      - ./scripts/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:80"
    depends_on:
      - product_api
    networks:
      - load-balancing

  mailhog:
    image: mailhog/mailhog
    container_name: 'mailhog'
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - load-balancing

  auth_api:
    build:
      context: src
      dockerfile: ./Services/Auth/Api.Auth/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - 5000:8080
    depends_on:
      - mongo
    networks:
      - load-balancing

  product_api:
    build:
      context: src
      dockerfile: ./Services/FinancialProduct/Api.FinancialProduct/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - PORT=3000
    deploy:
      replicas: 3
    depends_on:
      - mongo
      - redis
    networks:
      - load-balancing

  negotiation_api:
    build:
      context: src
      dockerfile: ./Services/Negotiation/Api.Negotiation/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - 5005:8080
    depends_on:
      - mongo
      - redis
    networks:
      - load-balancing

  notification_job:
    build:
      context: src
      dockerfile: ./Services/Notification/Job.Notification/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - mailhog
      - mongo
    networks:
      - load-balancing

networks:
  load-balancing: