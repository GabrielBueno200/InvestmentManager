services:
  mongo:
    image: mongo:latest
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: investment_db
    volumes:
      - ./scripts/initdb/:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  redis:
    image: redis:latest
    command: redis-server --requirepass Example1234!
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
      
  nginx:
    image: nginx:latest
    container_name: reverse_proxy
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:80"

  mailhog:
    image: mailhog/mailhog
    container_name: 'mailhog'
    ports:
      - "1025:1025"
      - "8025:8025"

  auth_api:
    build:
      context: .
      dockerfile: ./src/Services/Auth/Api.Auth/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - 5000:80
    depends_on:
      - mongo

  product_api:
    build:
      context: .
      dockerfile: ./src/Services/FinancialProduct/Api.FinancialProduct/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - 5001:80
    depends_on:
      - mongo
      - redis
      - nginx

  negotiation_api:
    build:
      context: .
      dockerfile: ./src/Services/Negotiation/Api.Negotiation/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - 5005:80
    depends_on:
      - mongo
      - redis
      - nginx

  notification_job:
    build:
      context: .
      dockerfile: ./src/Services/Notification/Job.Notification/Dockerfile
    depends_on:
      - mailhog
      - mongo